//1

void _CreateBeamEffect(
	Player[] | Player visibleTo,
	BeamType beamType,
	in Player | Vector startPosition,
	in Player | Vector endPosition,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleTo,
		BeamType: beamType,
		StartPosition: startPosition,
		EndPosition: endPosition,
		Color: color,
		Reevaluation: EffectRev.None
    );
}



//2

void _CreateBeamEffect(
	Player[] | Player visibleTo,
	BeamType beamType,
	in Player | Vector startPosition,
	in Player | Vector endPosition,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleTo,
		BeamType: beamType,
		StartPosition: startPosition,
		EndPosition: endPosition,
		Color: color_reev(),
		Reevaluation: EffectRev.Color
    );
}



//3

void _CreateBeamEffect(
	Player[] | Player visibleTo,
	BeamType beamType,
	in Player | Vector startPosition,
	in Player | Vector endPosition,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleTo,
		BeamType: beamType,
		StartPosition: startPosition,
		EndPosition: endPosition,
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.Color
    );
}



//4

void _CreateBeamEffect(
	Player[] | Player visibleTo,
	BeamType beamType,
	in Player | Vector startPosition,
	const () => Player | Vector endPosition_reev,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleTo,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev(),
		Color: color,
		Reevaluation: EffectRev.PositionAndRadius
    );
}



//5

void _CreateBeamEffect(
	Player[] | Player visibleTo,
	BeamType beamType,
	in Player | Vector startPosition,
	const Player => Player | Vector endPosition_reev_for,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleTo,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color,
		Reevaluation: EffectRev.PositionAndRadius
    );
}



//6

void _CreateBeamEffect(
	Player[] | Player visibleTo,
	BeamType beamType,
	in Player | Vector startPosition,
	const () => Player | Vector endPosition_reev,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleTo,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev(),
		Color: color_reev(),
		Reevaluation: EffectRev.PositionRadiusAndColor
    );
}



//7

void _CreateBeamEffect(
	Player[] | Player visibleTo,
	BeamType beamType,
	in Player | Vector startPosition,
	const () => Player | Vector endPosition_reev,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleTo,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev(),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.PositionRadiusAndColor
    );
}



//8

void _CreateBeamEffect(
	Player[] | Player visibleTo,
	BeamType beamType,
	in Player | Vector startPosition,
	const Player => Player | Vector endPosition_reev_for,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleTo,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev(),
		Reevaluation: EffectRev.PositionRadiusAndColor
    );
}



//9

void _CreateBeamEffect(
	Player[] | Player visibleTo,
	BeamType beamType,
	in Player | Vector startPosition,
	const Player => Player | Vector endPosition_reev_for,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleTo,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.PositionRadiusAndColor
    );
}



//10

void _CreateBeamEffect(
	Player[] | Player visibleTo,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	in Player | Vector endPosition,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleTo,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: EvaluateOnce(endPosition),
		Color: color,
		Reevaluation: EffectRev.PositionAndRadius
    );
}



//11

void _CreateBeamEffect(
	Player[] | Player visibleTo,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	in Player | Vector endPosition,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleTo,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: EvaluateOnce(endPosition),
		Color: color,
		Reevaluation: EffectRev.PositionAndRadius
    );
}



//12

void _CreateBeamEffect(
	Player[] | Player visibleTo,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	in Player | Vector endPosition,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleTo,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev(),
		Reevaluation: EffectRev.PositionRadiusAndColor
    );
}



//13

void _CreateBeamEffect(
	Player[] | Player visibleTo,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	in Player | Vector endPosition,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleTo,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.PositionRadiusAndColor
    );
}



//14

void _CreateBeamEffect(
	Player[] | Player visibleTo,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	in Player | Vector endPosition,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleTo,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev(),
		Reevaluation: EffectRev.PositionRadiusAndColor
    );
}



//15

void _CreateBeamEffect(
	Player[] | Player visibleTo,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	in Player | Vector endPosition,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleTo,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.PositionRadiusAndColor
    );
}



//16

void _CreateBeamEffect(
	Player[] | Player visibleTo,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const () => Player | Vector endPosition_reev,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleTo,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev(),
		Color: color,
		Reevaluation: EffectRev.PositionAndRadius
    );
}



//17

void _CreateBeamEffect(
	Player[] | Player visibleTo,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const Player => Player | Vector endPosition_reev_for,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleTo,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color,
		Reevaluation: EffectRev.PositionAndRadius
    );
}



//18

void _CreateBeamEffect(
	Player[] | Player visibleTo,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const () => Player | Vector endPosition_reev,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleTo,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev(),
		Color: color,
		Reevaluation: EffectRev.PositionAndRadius
    );
}



//19

void _CreateBeamEffect(
	Player[] | Player visibleTo,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const Player => Player | Vector endPosition_reev_for,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleTo,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color,
		Reevaluation: EffectRev.PositionAndRadius
    );
}



//20

void _CreateBeamEffect(
	Player[] | Player visibleTo,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const () => Player | Vector endPosition_reev,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleTo,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev(),
		Color: color_reev(),
		Reevaluation: EffectRev.PositionRadiusAndColor
    );
}



//21

void _CreateBeamEffect(
	Player[] | Player visibleTo,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const () => Player | Vector endPosition_reev,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleTo,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev(),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.PositionRadiusAndColor
    );
}



//22

void _CreateBeamEffect(
	Player[] | Player visibleTo,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const Player => Player | Vector endPosition_reev_for,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleTo,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev(),
		Reevaluation: EffectRev.PositionRadiusAndColor
    );
}



//23

void _CreateBeamEffect(
	Player[] | Player visibleTo,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const Player => Player | Vector endPosition_reev_for,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleTo,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.PositionRadiusAndColor
    );
}



//24

void _CreateBeamEffect(
	Player[] | Player visibleTo,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const () => Player | Vector endPosition_reev,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleTo,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev(),
		Color: color_reev(),
		Reevaluation: EffectRev.PositionRadiusAndColor
    );
}



//25

void _CreateBeamEffect(
	Player[] | Player visibleTo,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const () => Player | Vector endPosition_reev,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleTo,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev(),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.PositionRadiusAndColor
    );
}



//26

void _CreateBeamEffect(
	Player[] | Player visibleTo,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const Player => Player | Vector endPosition_reev_for,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleTo,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev(),
		Reevaluation: EffectRev.PositionRadiusAndColor
    );
}



//27

void _CreateBeamEffect(
	Player[] | Player visibleTo,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const Player => Player | Vector endPosition_reev_for,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleTo,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.PositionRadiusAndColor
    );
}



//28

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	in Player | Vector startPosition,
	in Player | Vector endPosition,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition,
		EndPosition: endPosition,
		Color: color,
		Reevaluation: EffectRev.VisibleTo
    );
}



//29

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	in Player | Vector startPosition,
	in Player | Vector endPosition,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition,
		EndPosition: endPosition,
		Color: color,
		Reevaluation: EffectRev.VisibleTo
    );
}



//30

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	in Player | Vector startPosition,
	in Player | Vector endPosition,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition,
		EndPosition: endPosition,
		Color: color,
		Reevaluation: EffectRev.VisibleTo
    );
}



//31

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	in Player | Vector startPosition,
	in Player | Vector endPosition,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition,
		EndPosition: endPosition,
		Color: color,
		Reevaluation: EffectRev.VisibleTo
    );
}



//32

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	in Player | Vector startPosition,
	in Player | Vector endPosition,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition,
		EndPosition: endPosition,
		Color: color,
		Reevaluation: EffectRev.VisibleTo
    );
}



//33

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	in Player | Vector startPosition,
	in Player | Vector endPosition,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition,
		EndPosition: endPosition,
		Color: color,
		Reevaluation: EffectRev.VisibleTo
    );
}



//34

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	in Player | Vector startPosition,
	in Player | Vector endPosition,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition,
		EndPosition: endPosition,
		Color: color,
		Reevaluation: EffectRev.VisibleTo
    );
}



//35

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	in Player | Vector startPosition,
	in Player | Vector endPosition,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition,
		EndPosition: endPosition,
		Color: color,
		Reevaluation: EffectRev.VisibleTo
    );
}



//36

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	in Player | Vector startPosition,
	in Player | Vector endPosition,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition,
		EndPosition: endPosition,
		Color: color,
		Reevaluation: EffectRev.VisibleTo
    );
}



//37

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	in Player | Vector startPosition,
	in Player | Vector endPosition,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition,
		EndPosition: endPosition,
		Color: color,
		Reevaluation: EffectRev.VisibleTo
    );
}



//38

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	in Player | Vector startPosition,
	in Player | Vector endPosition,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition,
		EndPosition: endPosition,
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToAndColor
    );
}



//39

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	in Player | Vector startPosition,
	in Player | Vector endPosition,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition,
		EndPosition: endPosition,
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToAndColor
    );
}



//40

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	in Player | Vector startPosition,
	in Player | Vector endPosition,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition,
		EndPosition: endPosition,
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToAndColor
    );
}



//41

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	in Player | Vector startPosition,
	in Player | Vector endPosition,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition,
		EndPosition: endPosition,
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToAndColor
    );
}



//42

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	in Player | Vector startPosition,
	in Player | Vector endPosition,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition,
		EndPosition: endPosition,
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToAndColor
    );
}



//43

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	in Player | Vector startPosition,
	in Player | Vector endPosition,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition,
		EndPosition: endPosition,
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToAndColor
    );
}



//44

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	in Player | Vector startPosition,
	in Player | Vector endPosition,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition,
		EndPosition: endPosition,
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToAndColor
    );
}



//45

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	in Player | Vector startPosition,
	in Player | Vector endPosition,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition,
		EndPosition: endPosition,
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToAndColor
    );
}



//46

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	in Player | Vector startPosition,
	in Player | Vector endPosition,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition,
		EndPosition: endPosition,
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToAndColor
    );
}



//47

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	in Player | Vector startPosition,
	in Player | Vector endPosition,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition,
		EndPosition: endPosition,
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToAndColor
    );
}



//48

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	in Player | Vector startPosition,
	in Player | Vector endPosition,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition,
		EndPosition: endPosition,
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToAndColor
    );
}



//49

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	in Player | Vector startPosition,
	in Player | Vector endPosition,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition,
		EndPosition: endPosition,
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToAndColor
    );
}



//50

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	in Player | Vector startPosition,
	in Player | Vector endPosition,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition,
		EndPosition: endPosition,
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToAndColor
    );
}



//51

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	in Player | Vector startPosition,
	in Player | Vector endPosition,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition,
		EndPosition: endPosition,
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToAndColor
    );
}



//52

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	in Player | Vector startPosition,
	in Player | Vector endPosition,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition,
		EndPosition: endPosition,
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToAndColor
    );
}



//53

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	in Player | Vector startPosition,
	in Player | Vector endPosition,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition,
		EndPosition: endPosition,
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToAndColor
    );
}



//54

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	in Player | Vector startPosition,
	in Player | Vector endPosition,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition,
		EndPosition: endPosition,
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToAndColor
    );
}



//55

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	in Player | Vector startPosition,
	in Player | Vector endPosition,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition,
		EndPosition: endPosition,
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToAndColor
    );
}



//56

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	in Player | Vector startPosition,
	in Player | Vector endPosition,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition,
		EndPosition: endPosition,
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToAndColor
    );
}



//57

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	in Player | Vector startPosition,
	in Player | Vector endPosition,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition,
		EndPosition: endPosition,
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToAndColor
    );
}



//58

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	in Player | Vector startPosition,
	const () => Player | Vector endPosition_reev,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev(),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//59

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	in Player | Vector startPosition,
	const () => Player | Vector endPosition_reev,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev(),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//60

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	in Player | Vector startPosition,
	const () => Player | Vector endPosition_reev,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev(),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//61

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	in Player | Vector startPosition,
	const () => Player | Vector endPosition_reev,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev(),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//62

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	in Player | Vector startPosition,
	const () => Player | Vector endPosition_reev,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev(),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//63

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	in Player | Vector startPosition,
	const () => Player | Vector endPosition_reev,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev(),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//64

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	in Player | Vector startPosition,
	const () => Player | Vector endPosition_reev,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev(),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//65

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	in Player | Vector startPosition,
	const () => Player | Vector endPosition_reev,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev(),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//66

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	in Player | Vector startPosition,
	const () => Player | Vector endPosition_reev,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev(),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//67

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	in Player | Vector startPosition,
	const () => Player | Vector endPosition_reev,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev(),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//68

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	in Player | Vector startPosition,
	const Player => Player | Vector endPosition_reev_for,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//69

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	in Player | Vector startPosition,
	const Player => Player | Vector endPosition_reev_for,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//70

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	in Player | Vector startPosition,
	const Player => Player | Vector endPosition_reev_for,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//71

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	in Player | Vector startPosition,
	const Player => Player | Vector endPosition_reev_for,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//72

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	in Player | Vector startPosition,
	const Player => Player | Vector endPosition_reev_for,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//73

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	in Player | Vector startPosition,
	const Player => Player | Vector endPosition_reev_for,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//74

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	in Player | Vector startPosition,
	const Player => Player | Vector endPosition_reev_for,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//75

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	in Player | Vector startPosition,
	const Player => Player | Vector endPosition_reev_for,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//76

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	in Player | Vector startPosition,
	const Player => Player | Vector endPosition_reev_for,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//77

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	in Player | Vector startPosition,
	const Player => Player | Vector endPosition_reev_for,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//78

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	in Player | Vector startPosition,
	const () => Player | Vector endPosition_reev,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev(),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//79

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	in Player | Vector startPosition,
	const () => Player | Vector endPosition_reev,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev(),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//80

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	in Player | Vector startPosition,
	const () => Player | Vector endPosition_reev,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev(),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//81

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	in Player | Vector startPosition,
	const () => Player | Vector endPosition_reev,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev(),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//82

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	in Player | Vector startPosition,
	const () => Player | Vector endPosition_reev,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev(),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//83

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	in Player | Vector startPosition,
	const () => Player | Vector endPosition_reev,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev(),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//84

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	in Player | Vector startPosition,
	const () => Player | Vector endPosition_reev,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev(),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//85

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	in Player | Vector startPosition,
	const () => Player | Vector endPosition_reev,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev(),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//86

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	in Player | Vector startPosition,
	const () => Player | Vector endPosition_reev,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev(),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//87

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	in Player | Vector startPosition,
	const () => Player | Vector endPosition_reev,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev(),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//88

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	in Player | Vector startPosition,
	const () => Player | Vector endPosition_reev,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev(),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//89

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	in Player | Vector startPosition,
	const () => Player | Vector endPosition_reev,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev(),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//90

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	in Player | Vector startPosition,
	const () => Player | Vector endPosition_reev,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev(),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//91

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	in Player | Vector startPosition,
	const () => Player | Vector endPosition_reev,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev(),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//92

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	in Player | Vector startPosition,
	const () => Player | Vector endPosition_reev,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev(),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//93

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	in Player | Vector startPosition,
	const () => Player | Vector endPosition_reev,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev(),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//94

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	in Player | Vector startPosition,
	const () => Player | Vector endPosition_reev,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev(),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//95

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	in Player | Vector startPosition,
	const () => Player | Vector endPosition_reev,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev(),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//96

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	in Player | Vector startPosition,
	const () => Player | Vector endPosition_reev,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev(),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//97

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	in Player | Vector startPosition,
	const () => Player | Vector endPosition_reev,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev(),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//98

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	in Player | Vector startPosition,
	const Player => Player | Vector endPosition_reev_for,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//99

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	in Player | Vector startPosition,
	const Player => Player | Vector endPosition_reev_for,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//100

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	in Player | Vector startPosition,
	const Player => Player | Vector endPosition_reev_for,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//101

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	in Player | Vector startPosition,
	const Player => Player | Vector endPosition_reev_for,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//102

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	in Player | Vector startPosition,
	const Player => Player | Vector endPosition_reev_for,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//103

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	in Player | Vector startPosition,
	const Player => Player | Vector endPosition_reev_for,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//104

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	in Player | Vector startPosition,
	const Player => Player | Vector endPosition_reev_for,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//105

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	in Player | Vector startPosition,
	const Player => Player | Vector endPosition_reev_for,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//106

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	in Player | Vector startPosition,
	const Player => Player | Vector endPosition_reev_for,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//107

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	in Player | Vector startPosition,
	const Player => Player | Vector endPosition_reev_for,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//108

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	in Player | Vector startPosition,
	const Player => Player | Vector endPosition_reev_for,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//109

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	in Player | Vector startPosition,
	const Player => Player | Vector endPosition_reev_for,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//110

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	in Player | Vector startPosition,
	const Player => Player | Vector endPosition_reev_for,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//111

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	in Player | Vector startPosition,
	const Player => Player | Vector endPosition_reev_for,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//112

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	in Player | Vector startPosition,
	const Player => Player | Vector endPosition_reev_for,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//113

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	in Player | Vector startPosition,
	const Player => Player | Vector endPosition_reev_for,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//114

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	in Player | Vector startPosition,
	const Player => Player | Vector endPosition_reev_for,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//115

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	in Player | Vector startPosition,
	const Player => Player | Vector endPosition_reev_for,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//116

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	in Player | Vector startPosition,
	const Player => Player | Vector endPosition_reev_for,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//117

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	in Player | Vector startPosition,
	const Player => Player | Vector endPosition_reev_for,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: EvaluateOnce(startPosition),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//118

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	in Player | Vector endPosition,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: EvaluateOnce(endPosition),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//119

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	in Player | Vector endPosition,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: EvaluateOnce(endPosition),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//120

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	in Player | Vector endPosition,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: EvaluateOnce(endPosition),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//121

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	in Player | Vector endPosition,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: EvaluateOnce(endPosition),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//122

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	in Player | Vector endPosition,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: EvaluateOnce(endPosition),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//123

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	in Player | Vector endPosition,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: EvaluateOnce(endPosition),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//124

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	in Player | Vector endPosition,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: EvaluateOnce(endPosition),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//125

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	in Player | Vector endPosition,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: EvaluateOnce(endPosition),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//126

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	in Player | Vector endPosition,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: EvaluateOnce(endPosition),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//127

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	in Player | Vector endPosition,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: EvaluateOnce(endPosition),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//128

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	in Player | Vector endPosition,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: EvaluateOnce(endPosition),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//129

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	in Player | Vector endPosition,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: EvaluateOnce(endPosition),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//130

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	in Player | Vector endPosition,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: EvaluateOnce(endPosition),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//131

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	in Player | Vector endPosition,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: EvaluateOnce(endPosition),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//132

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	in Player | Vector endPosition,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: EvaluateOnce(endPosition),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//133

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	in Player | Vector endPosition,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: EvaluateOnce(endPosition),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//134

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	in Player | Vector endPosition,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: EvaluateOnce(endPosition),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//135

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	in Player | Vector endPosition,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: EvaluateOnce(endPosition),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//136

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	in Player | Vector endPosition,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: EvaluateOnce(endPosition),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//137

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	in Player | Vector endPosition,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: EvaluateOnce(endPosition),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//138

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	in Player | Vector endPosition,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//139

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	in Player | Vector endPosition,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//140

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	in Player | Vector endPosition,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//141

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	in Player | Vector endPosition,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//142

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	in Player | Vector endPosition,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//143

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	in Player | Vector endPosition,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//144

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	in Player | Vector endPosition,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//145

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	in Player | Vector endPosition,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//146

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	in Player | Vector endPosition,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//147

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	in Player | Vector endPosition,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//148

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	in Player | Vector endPosition,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//149

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	in Player | Vector endPosition,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//150

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	in Player | Vector endPosition,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//151

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	in Player | Vector endPosition,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//152

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	in Player | Vector endPosition,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//153

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	in Player | Vector endPosition,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//154

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	in Player | Vector endPosition,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//155

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	in Player | Vector endPosition,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//156

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	in Player | Vector endPosition,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//157

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	in Player | Vector endPosition,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//158

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	in Player | Vector endPosition,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//159

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	in Player | Vector endPosition,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//160

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	in Player | Vector endPosition,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//161

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	in Player | Vector endPosition,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//162

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	in Player | Vector endPosition,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//163

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	in Player | Vector endPosition,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//164

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	in Player | Vector endPosition,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//165

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	in Player | Vector endPosition,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//166

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	in Player | Vector endPosition,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//167

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	in Player | Vector endPosition,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//168

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	in Player | Vector endPosition,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//169

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	in Player | Vector endPosition,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//170

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	in Player | Vector endPosition,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//171

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	in Player | Vector endPosition,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//172

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	in Player | Vector endPosition,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//173

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	in Player | Vector endPosition,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//174

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	in Player | Vector endPosition,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//175

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	in Player | Vector endPosition,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//176

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	in Player | Vector endPosition,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//177

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	in Player | Vector endPosition,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: EvaluateOnce(endPosition),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//178

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const () => Player | Vector endPosition_reev,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev(),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//179

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const () => Player | Vector endPosition_reev,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev(),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//180

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const () => Player | Vector endPosition_reev,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev(),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//181

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const () => Player | Vector endPosition_reev,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev(),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//182

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const () => Player | Vector endPosition_reev,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev(),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//183

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const () => Player | Vector endPosition_reev,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev(),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//184

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const () => Player | Vector endPosition_reev,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev(),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//185

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const () => Player | Vector endPosition_reev,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev(),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//186

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const () => Player | Vector endPosition_reev,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev(),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//187

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const () => Player | Vector endPosition_reev,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev(),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//188

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const Player => Player | Vector endPosition_reev_for,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//189

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const Player => Player | Vector endPosition_reev_for,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//190

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const Player => Player | Vector endPosition_reev_for,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//191

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const Player => Player | Vector endPosition_reev_for,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//192

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const Player => Player | Vector endPosition_reev_for,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//193

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const Player => Player | Vector endPosition_reev_for,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//194

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const Player => Player | Vector endPosition_reev_for,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//195

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const Player => Player | Vector endPosition_reev_for,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//196

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const Player => Player | Vector endPosition_reev_for,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//197

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const Player => Player | Vector endPosition_reev_for,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//198

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const () => Player | Vector endPosition_reev,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev(),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//199

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const () => Player | Vector endPosition_reev,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev(),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//200

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const () => Player | Vector endPosition_reev,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev(),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//201

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const () => Player | Vector endPosition_reev,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev(),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//202

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const () => Player | Vector endPosition_reev,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev(),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//203

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const () => Player | Vector endPosition_reev,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev(),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//204

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const () => Player | Vector endPosition_reev,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev(),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//205

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const () => Player | Vector endPosition_reev,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev(),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//206

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const () => Player | Vector endPosition_reev,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev(),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//207

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const () => Player | Vector endPosition_reev,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev(),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//208

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const Player => Player | Vector endPosition_reev_for,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//209

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const Player => Player | Vector endPosition_reev_for,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//210

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const Player => Player | Vector endPosition_reev_for,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//211

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const Player => Player | Vector endPosition_reev_for,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//212

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const Player => Player | Vector endPosition_reev_for,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//213

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const Player => Player | Vector endPosition_reev_for,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//214

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const Player => Player | Vector endPosition_reev_for,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//215

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const Player => Player | Vector endPosition_reev_for,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//216

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const Player => Player | Vector endPosition_reev_for,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//217

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const Player => Player | Vector endPosition_reev_for,
	in Color color    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color,
		Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
}



//218

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const () => Player | Vector endPosition_reev,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev(),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//219

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const () => Player | Vector endPosition_reev,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev(),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//220

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const () => Player | Vector endPosition_reev,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev(),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//221

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const () => Player | Vector endPosition_reev,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev(),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//222

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const () => Player | Vector endPosition_reev,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev(),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//223

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const () => Player | Vector endPosition_reev,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev(),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//224

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const () => Player | Vector endPosition_reev,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev(),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//225

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const () => Player | Vector endPosition_reev,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev(),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//226

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const () => Player | Vector endPosition_reev,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev(),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//227

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const () => Player | Vector endPosition_reev,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev(),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//228

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const () => Player | Vector endPosition_reev,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev(),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//229

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const () => Player | Vector endPosition_reev,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev(),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//230

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const () => Player | Vector endPosition_reev,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev(),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//231

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const () => Player | Vector endPosition_reev,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev(),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//232

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const () => Player | Vector endPosition_reev,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev(),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//233

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const () => Player | Vector endPosition_reev,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev(),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//234

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const () => Player | Vector endPosition_reev,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev(),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//235

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const () => Player | Vector endPosition_reev,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev(),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//236

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const () => Player | Vector endPosition_reev,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev(),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//237

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const () => Player | Vector endPosition_reev,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev(),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//238

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const Player => Player | Vector endPosition_reev_for,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//239

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const Player => Player | Vector endPosition_reev_for,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//240

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const Player => Player | Vector endPosition_reev_for,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//241

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const Player => Player | Vector endPosition_reev_for,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//242

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const Player => Player | Vector endPosition_reev_for,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//243

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const Player => Player | Vector endPosition_reev_for,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//244

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const Player => Player | Vector endPosition_reev_for,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//245

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const Player => Player | Vector endPosition_reev_for,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//246

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const Player => Player | Vector endPosition_reev_for,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//247

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const Player => Player | Vector endPosition_reev_for,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//248

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const Player => Player | Vector endPosition_reev_for,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//249

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const Player => Player | Vector endPosition_reev_for,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//250

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const Player => Player | Vector endPosition_reev_for,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//251

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const Player => Player | Vector endPosition_reev_for,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//252

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const Player => Player | Vector endPosition_reev_for,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//253

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const Player => Player | Vector endPosition_reev_for,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//254

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const Player => Player | Vector endPosition_reev_for,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//255

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const Player => Player | Vector endPosition_reev_for,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//256

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const Player => Player | Vector endPosition_reev_for,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//257

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const () => Player | Vector startPosition_reev,
	const Player => Player | Vector endPosition_reev_for,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev(),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//258

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const () => Player | Vector endPosition_reev,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev(),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//259

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const () => Player | Vector endPosition_reev,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev(),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//260

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const () => Player | Vector endPosition_reev,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev(),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//261

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const () => Player | Vector endPosition_reev,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev(),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//262

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const () => Player | Vector endPosition_reev,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev(),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//263

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const () => Player | Vector endPosition_reev,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev(),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//264

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const () => Player | Vector endPosition_reev,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev(),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//265

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const () => Player | Vector endPosition_reev,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev(),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//266

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const () => Player | Vector endPosition_reev,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev(),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//267

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const () => Player | Vector endPosition_reev,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev(),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//268

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const () => Player | Vector endPosition_reev,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev(),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//269

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const () => Player | Vector endPosition_reev,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev(),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//270

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const () => Player | Vector endPosition_reev,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev(),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//271

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const () => Player | Vector endPosition_reev,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev(),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//272

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const () => Player | Vector endPosition_reev,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev(),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//273

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const () => Player | Vector endPosition_reev,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev(),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//274

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const () => Player | Vector endPosition_reev,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev(),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//275

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const () => Player | Vector endPosition_reev,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev(),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//276

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const () => Player | Vector endPosition_reev,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev(),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//277

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const () => Player | Vector endPosition_reev,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev(),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//278

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const Player => Player | Vector endPosition_reev_for,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//279

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const Player => Player | Vector endPosition_reev_for,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//280

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const Player => Player | Vector endPosition_reev_for,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//281

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const Player => Player | Vector endPosition_reev_for,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//282

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const Player => Player | Vector endPosition_reev_for,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//283

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const Player => Player | Vector endPosition_reev_for,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//284

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const Player => Player | Vector endPosition_reev_for,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//285

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const Player => Player | Vector endPosition_reev_for,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//286

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const Player => Player | Vector endPosition_reev_for,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//287

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const Player => Player | Vector endPosition_reev_for,
	const () => Color color_reev    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev(),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//288

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const Player => Player | Vector endPosition_reev_for,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//289

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const Player => Player | Vector endPosition_reev_for,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//290

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const Player => Player | Vector endPosition_reev_for,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//291

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const Player => Player | Vector endPosition_reev_for,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//292

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const Player => Player | Vector endPosition_reev_for,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//293

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const Player => Player | Vector endPosition_reev_for,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//294

void _CreateBeamEffect(
	in Player | Player[] visibleTo = AllPlayers(Team.All),
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const Player => Player | Vector endPosition_reev_for,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && EvaluateOnce(visibleTo.Contains(LocalPlayer())) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//295

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	in Boolean visibleIf = true,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const Player => Player | Vector endPosition_reev_for,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: EvaluateOnce(visibleIf) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//296

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const () => Boolean visibleIf_reev,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const Player => Player | Vector endPosition_reev_for,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev() && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}



//297

void _CreateBeamEffect(
	const () => Player | Player[] visibleTo_reev,
	const Player => Boolean visibleIf_reev_for,
	BeamType beamType,
	const Player => Player | Vector startPosition_reev_for,
	const Player => Player | Vector endPosition_reev_for,
	const Player => Color color_reev_for    
) {
    CreateBeamEffect(
		VisibleTo: visibleIf_reev_for(LocalPlayer()) && visibleTo_reev().Contains(LocalPlayer()) ? AllPlayers(Team.All) : null,
		BeamType: beamType,
		StartPosition: startPosition_reev_for(LocalPlayer()),
		EndPosition: endPosition_reev_for(LocalPlayer()),
		Color: color_reev_for(LocalPlayer()),
		Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );
}

